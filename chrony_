#!/usr/bin/perl
# -*- sh -*-
#
# Plugin to monitor chrony sources.
#
# Offset は local time - source time (値がプラスなら、ローカルの時計はソースより進んでいる)
# chrony.conf の refclock の offset の数字は、大きくなるとローカルクロックは進む(単位は秒)
#
# SELinux のポリシー設定コマンド
# semanage fcontext -a -t unconfined_munin_plugin_exec_t '/usr/local/share/munin/plugins/chrony_'
#
#%# family=contrib

use strict;
use warnings;
use Munin::Plugin;
use File::Spec;
use Fcntl qw(:flock);
use IPC::Run qw(run);

my %modes = (
  "frequency" => {
    "config" => {
      "title" => "Frequency",
      "args" => "--base 1000",
      "vlabel" => "step/sec",
    },
    "col" => 4,
  },
  "freqskew" => {
    "config" => {
      "title" => "Frequency Skew",
      "args" => "--base 1000",
      "vlabel" => "step/sec",
    },
    "col" => 5,
  },
  "offset" => {
    "config" => {
      "title" => "Offset",
      "args" => "--base 1000",
      "vlabel" => "sec",
    },
    "col" => 6,
  },
  "stddev" => {
    "config" => {
      "title" => "Standard Deviation of Offset",
      "args" => "--base 1000",
      "vlabel" => "sec",
    },
    "col" => 7,
  }
);

my $mode;
if ( $0 =~ m/_([a-z]+)$/ ) {
    $mode = $1;
    if( ! defined $modes{$mode} ) {
        print join(',',keys(%modes));
        die "Unknown mode $mode";
    }
}

my $chronyc = "/usr/bin/chronyc";

if( defined $ARGV[0] && $ARGV[0]eq "autoconf" ) {
    if( -x $chronyc ) {
        print "yes\n";
    } else {
        print "no ( $chronyc not found )\n";
        exit 1;
    }
    exit 0;
}

# print values
my @lines = split /\n/, get_chronyc_sources();
# ==== が出てくるまで読み飛ばす
while( $_ = shift @lines ) {
    last if( $_ =~ m/^={10,}/ );
}

if( defined $ARGV[0] && $ARGV[0] eq "config" ) {
    foreach my $key (keys %{$modes{$mode}{config}}) {
        printf("graph_%s %s\n", $key, $modes{$mode}{config}{$key});
    }
    print "graph_category time\n";
    printf("graph_info This graph shows %s of chrony sources.\n", $modes{$mode}{config}{title});
    foreach my $line (@lines) {
      my @fields = split(/[\s>]+/, $line);
      my $host = $fields[0];
      printf("%s.label %s\n", host2name($host), $host);
      printf("%s.type GAUGE\n", host2name($host) );
      printf("%s.draw LINE\n", host2name($host));
    }
    exit 0;
}

if( defined $ARGV[0] && $ARGV[0] eq "suggest" ) {
    foreach my $key (keys %modes) {
        printf("%s\n", $key);
    }
    exit 0;
}

die("Unknown mode $mode") if( ! defined $modes{$mode} );

foreach my $line (@lines) {
  my @fields = split(/[\s\[\]>]+/, $line);
  my $host = $fields[0];
  my $value = $fields[$modes{$mode}{"col"}];
  if( $mode eq "offset" || $mode eq "jitter" || $mode eq "stddev" ) {
    $value = expand_suffix($value);
  }elsif( $mode eq "frequency" || $mode eq "freqskew" ) {
    $value = $value * 1e-6; # ppm to Hz
  }elsif( $mode eq "reach" ) {
    # 8進数表記で、1のビットの数を数える
    $value = sprintf("%b", oct($value)) =~ tr/1//;
  }

  # NR が 4 以上で、Span が 60以上のものだけを表示する
  if( 4 <= $fields[2] && 60 <= expand_suffix($fields[3]) ) {
    printf("%s.value %e\n", host2name($host), $value);
  }
}
exit 0;

# 接尾辞を展開する
sub expand_suffix {
  my $s = shift;
  if( $s =~ m/([+-]?\d+)([a-z]*)/ ) {
    my $v = $1;
    if( $2 eq '' or $2 eq 's') {
    }elsif( $2 eq 'ms' ) {
      $v *= 1e-3;
    }elsif( $2 eq 'us' ) {
      $v *= 1e-6;
    }elsif( $2 eq 'ns' ) {
      $v *= 1e-9;
    }elsif( $2 eq 'ps' ) {
      $v *= 1e-12;
    }elsif( $2 eq 'm' ) {
      $v *= 60;
    }elsif( $2 eq 'h' ) {
      $v *= 3600;
    }elsif( $2 eq 'd' ) {
      $v *= 86400;
    }elsif( $2 eq 'w' ) {
      $v *= 604800;
    }elsif( $2 eq 'y' ) {
      $v *= 31536000;
    }else{
      die "Unknown suffix $2";
    }
    return $v;
  }
  die "Cannot expand suffix of $s";
}

# ホスト名から要素名を作る
sub host2name {
  my $host = shift;
  $host =~ s/[^a-zA-Z0-9_]//g;
  return $host;
}

# chronyの出力を得る
sub get_chronyc_sources {
  # 1分以内に取得したデータはキャッシュする
  my $user = getpwuid($>);

  # 一時ファイルを書き込めないことがあるので、毎回実行する
  my @cmd = ($chronyc, 'sourcestats');
  run \@cmd, '>', \my $stdout;

  return $stdout;
}